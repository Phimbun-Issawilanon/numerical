# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main3.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QGridLayout, QWidget
from PyQt5.QtGui import QPixmap
from PyQt5 import QtCore, QtWidgets
import numpy as np
import time
import julia

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1000, 600))
        MainWindow.setStyleSheet("")
        MainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_header = QtWidgets.QLabel(self.centralwidget)
        self.label_header.setGeometry(QtCore.QRect(20, 0, 241, 41))
        self.label_header.setStyleSheet("font: 87 30pt \"Segoe UI Black\";\n"
"")
        self.label_header.setObjectName("label_header")
        self.groupBox_equation = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_equation.setGeometry(QtCore.QRect(20, 50, 961, 241))
        self.groupBox_equation.setStyleSheet("font: 87 16pt \"Segoe UI Black\";\n"
"background-color: rgb(225, 225, 225);\n"
"border-radius: 10px;")
        self.groupBox_equation.setObjectName("groupBox_equation")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox_equation)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 30, 441, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(10, 0, 1, 0)
        self.horizontalLayout.setSpacing(10)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_ode_method = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_ode_method.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";\n"
"\n"
"")
        self.label_ode_method.setObjectName("label_ode_method")
        self.horizontalLayout.addWidget(self.label_ode_method)
        self.comboBox_ode_method = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.comboBox_ode_method.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 15pt \"Segoe UI Emoji\";\n"
"")
        self.comboBox_ode_method.setObjectName("comboBox_ode_method")
        self.comboBox_ode_method.addItem("")
        self.comboBox_ode_method.addItem("")
        self.comboBox_ode_method.addItem("")
        self.horizontalLayout.addWidget(self.comboBox_ode_method)
        self.horizontalLayout.setStretch(1, 1)
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox_equation)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(520, 90, 311, 125))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setHorizontalSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        self.label_colon3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_colon3.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_colon3.setObjectName("label_colon3")
        self.gridLayout.addWidget(self.label_colon3, 2, 1, 1, 1)
        self.label_colon1 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_colon1.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_colon1.setObjectName("label_colon1")
        self.gridLayout.addWidget(self.label_colon1, 0, 1, 1, 1)
        self.label_y = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_y.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_y.setObjectName("label_y")
        self.gridLayout.addWidget(self.label_y, 0, 0, 1, 1)
        self.label_n = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_n.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_n.setObjectName("label_n")
        self.gridLayout.addWidget(self.label_n, 2, 0, 1, 1)
        self.SpinBox_y = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinBox_y.setStatusTip("")
        self.SpinBox_y.setAccessibleName("")
        self.SpinBox_y.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.SpinBox_y.setValue(1.0)
        self.SpinBox_y.setMinimum(-1000)
        self.SpinBox_y.setMaximum(1000)
        self.SpinBox_y.setAutoFillBackground(False)
        self.SpinBox_y.setStyleSheet("font: 15pt \"Palatino Linotype\";\n"
"background-color: rgb(255, 255, 255);")
        self.SpinBox_y.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.SpinBox_y.setWrapping(False)
        self.SpinBox_y.setFrame(True)
        self.SpinBox_y.setReadOnly(False)
        self.SpinBox_y.setObjectName("SpinBox_y")
        self.gridLayout.addWidget(self.SpinBox_y, 0, 2, 1, 1)
        self.SpinBox_tn = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinBox_tn.setStatusTip("")
        self.SpinBox_tn.setAccessibleName("")
        self.SpinBox_tn.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.SpinBox_tn.setValue(20)
        self.SpinBox_tn.setMinimum(-1000)
        self.SpinBox_tn.setMaximum(1000)
        self.SpinBox_tn.setAutoFillBackground(False)
        self.SpinBox_tn.setStyleSheet("font: 15pt \"Palatino Linotype\";\n"
"background-color: rgb(255, 255, 255);")
        self.SpinBox_tn.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.SpinBox_tn.setWrapping(False)
        self.SpinBox_tn.setFrame(True)
        self.SpinBox_tn.setReadOnly(False)
        self.SpinBox_tn.setObjectName("SpinBox_tn")
        self.gridLayout.addWidget(self.SpinBox_tn, 1, 2, 1, 1)
        self.label_tn = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_tn.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_tn.setObjectName("label_tn")
        self.gridLayout.addWidget(self.label_tn, 1, 0, 1, 1)
        self.SpinBox_n = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinBox_n.setStatusTip("")
        self.SpinBox_n.setAccessibleName("")
        self.SpinBox_n.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.SpinBox_n.setSingleStep(1)
        self.SpinBox_n.setValue(20.00)
        self.SpinBox_n.setMinimum(-1000)
        self.SpinBox_n.setMaximum(1000)
        self.SpinBox_n.setAutoFillBackground(False)
        self.SpinBox_n.setStyleSheet("font: 15pt \"Palatino Linotype\";\n"
"background-color: rgb(255, 255, 255);")
        self.SpinBox_n.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.SpinBox_n.setWrapping(False)
        self.SpinBox_n.setFrame(True)
        self.SpinBox_n.setReadOnly(False)
        self.SpinBox_n.setObjectName("SpinBox_n")
        self.gridLayout.addWidget(self.SpinBox_n, 2, 2, 1, 1)
        self.label_colon2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_colon2.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_colon2.setObjectName("label_colon2")
        self.gridLayout.addWidget(self.label_colon2, 1, 1, 1, 1)
        self.gridLayout.setColumnStretch(2, 1)
        self.layoutWidget_3 = QtWidgets.QWidget(self.groupBox_equation)
        self.layoutWidget_3.setGeometry(QtCore.QRect(10, 80, 441, 51))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_11.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(20)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_lib1 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_lib1.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib1.setObjectName("label_lib1")
        self.horizontalLayout_11.addWidget(self.label_lib1)
        self.comboBox_lib1 = QtWidgets.QComboBox(self.layoutWidget_3)
        self.comboBox_lib1.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 15pt \"Segoe UI Emoji\";")
        self.comboBox_lib1.setObjectName("comboBox_lib1")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.comboBox_lib1.addItem("")
        self.horizontalLayout_11.addWidget(self.comboBox_lib1)
        self.horizontalLayout_11.setStretch(1, 1)
        self.layoutWidget_4 = QtWidgets.QWidget(self.groupBox_equation)
        self.layoutWidget_4.setGeometry(QtCore.QRect(10, 130, 441, 51))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_12.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(20)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_lib2 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_lib2.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib2.setObjectName("label_lib2")
        self.horizontalLayout_12.addWidget(self.label_lib2)
        self.comboBox_lib2 = QtWidgets.QComboBox(self.layoutWidget_4)
        self.comboBox_lib2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 15pt \"Segoe UI Emoji\";")
        self.comboBox_lib2.setObjectName("comboBox_lib2")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.comboBox_lib2.addItem("")
        self.horizontalLayout_12.addWidget(self.comboBox_lib2)
        self.horizontalLayout_12.setStretch(1, 1)
        self.layoutWidget_5 = QtWidgets.QWidget(self.groupBox_equation)
        self.layoutWidget_5.setGeometry(QtCore.QRect(10, 180, 441, 51))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_13.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_13.setSpacing(20)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_lib3 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_lib3.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib3.setObjectName("label_lib3")
        self.horizontalLayout_13.addWidget(self.label_lib3)
        self.comboBox_lib3 = QtWidgets.QComboBox(self.layoutWidget_5)
        self.comboBox_lib3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 15pt \"Segoe UI Emoji\";")
        self.comboBox_lib3.setObjectName("comboBox_lib3")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.comboBox_lib3.addItem("")
        self.horizontalLayout_13.addWidget(self.comboBox_lib3)
        self.horizontalLayout_13.setStretch(1, 1)
        self.layoutWidget = QtWidgets.QWidget(self.groupBox_equation)
        self.layoutWidget.setGeometry(QtCore.QRect(470, 30, 471, 51))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(10)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_equation = QtWidgets.QLabel(self.layoutWidget)
        self.label_equation.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_equation.setObjectName("label_equation")
        self.horizontalLayout_2.addWidget(self.label_equation)
        self.comboBox_equation = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_equation.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox_equation.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"\n"
"font: 15pt \"Segoe UI Emoji\";")
        self.comboBox_equation.setObjectName("comboBox_equation")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.comboBox_equation.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBox_equation)
        self.horizontalLayout_2.setStretch(1, 1)
        self.pushButton = QtWidgets.QPushButton(self.groupBox_equation)
        self.pushButton.setGeometry(QtCore.QRect(850, 190, 101, 41))
        self.pushButton.setMouseTracking(False)
        self.pushButton.setTabletTracking(False)
        self.pushButton.setAcceptDrops(False)
        self.pushButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    background-color: rgb(150, 150, 150);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    font: 63 15pt \"Segoe UI Semibold\";\n"
"    border-left: 1px solid rgb(0, 0, 0);\n"
"    border-right: 2px solid rgb(0, 0, 0);\n"
"    border-bottom: 4px solid rgb(0, 0, 0);\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(0,0,0);\n"
"    border-left: 1px solid rgb(150, 150, 150);\n"
"    border-right: 2px solid  rgb(150, 150, 150);\n"
"    border-bottom: 4px solid rgb(150, 150, 150);\n"
"}")
        self.pushButton.setCheckable(False)
        self.pushButton.setChecked(False)
        self.pushButton.setAutoRepeat(False)
        self.pushButton.setAutoExclusive(False)
        self.pushButton.setAutoDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        # if click calculate
        self.pushButton.clicked.connect(self.get_all_input)
        self.groupBox_result = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_result.setGeometry(QtCore.QRect(20, 300, 961, 281))
        self.groupBox_result.setStyleSheet("font: 87 16pt \"Segoe UI Black\";\n"
"background-color: rgb(225, 225, 225);\n"
"border-radius: 10px;")
        self.groupBox_result.setObjectName("groupBox_result")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_result)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(80, 60, 371, 211))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_22 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_22.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_14.addWidget(self.label_22)
        self.label_time_3rd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_time_3rd.setStyleSheet("font: 15pt \"Segoe UI Emoji\";")
        self.label_time_3rd.setObjectName("label_time_3rd")
        self.horizontalLayout_14.addWidget(self.label_time_3rd)
        self.horizontalLayout_14.setStretch(1, 2)
        self.gridLayout_2.addLayout(self.horizontalLayout_14, 5, 1, 1, 1)
        self.label_3rd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_3rd.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_3rd.setObjectName("label_3rd")
        self.gridLayout_2.addWidget(self.label_3rd, 4, 0, 1, 1)
        self.label_lib_1st = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_lib_1st.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib_1st.setObjectName("label_lib_1st")
        self.gridLayout_2.addWidget(self.label_lib_1st, 0, 1, 1, 1)
        self.label_lib_3rd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_lib_3rd.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib_3rd.setObjectName("label_lib_3rd")
        self.gridLayout_2.addWidget(self.label_lib_3rd, 4, 1, 1, 1)
        self.label_lib_2nd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_lib_2nd.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_lib_2nd.setObjectName("label_lib_2nd")
        self.gridLayout_2.addWidget(self.label_lib_2nd, 2, 1, 1, 1)
        self.label_1st = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_1st.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_1st.setObjectName("label_1st")
        self.gridLayout_2.addWidget(self.label_1st, 0, 0, 1, 1)
        self.label_2nd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_2nd.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_2nd.setObjectName("label_2nd")
        self.gridLayout_2.addWidget(self.label_2nd, 2, 0, 1, 1)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_19 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_19.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_10.addWidget(self.label_19)
        self.label_time_2nd = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_time_2nd.setStyleSheet("font: 15pt \"Segoe UI Emoji\";")
        self.label_time_2nd.setObjectName("label_time_2nd")
        self.horizontalLayout_10.addWidget(self.label_time_2nd)
        self.horizontalLayout_10.setStretch(1, 2)
        self.gridLayout_2.addLayout(self.horizontalLayout_10, 3, 1, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_17 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_17.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_9.addWidget(self.label_17)
        self.label_time_1st = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_time_1st.setStyleSheet("font: 15pt \"Segoe UI Emoji\";")
        self.label_time_1st.setObjectName("label_time_1st")
        self.horizontalLayout_9.addWidget(self.label_time_1st)
        self.horizontalLayout_9.setStretch(1, 2)
        self.gridLayout_2.addLayout(self.horizontalLayout_9, 1, 1, 1, 1)
        self.total_graph = QtWidgets.QLabel(self.groupBox_result)
        self.total_graph.setGeometry(QtCore.QRect(500, 20, 381, 241))
        self.total_graph.setObjectName("total_graph")
        self.label_show_select_eq = QtWidgets.QLabel(self.groupBox_result)
        self.label_show_select_eq.setGeometry(QtCore.QRect(120, 20, 331, 28))
        self.label_show_select_eq.setStyleSheet("font: 63 15pt \"Segoe UI Semibold\";")
        self.label_show_select_eq.setObjectName("label_show_select_eq")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ODE Solver"))
        self.label_header.setText(_translate("MainWindow", "ODE  Solver"))
        self.groupBox_equation.setTitle(_translate("MainWindow", "Equation"))
        self.label_ode_method.setText(_translate("MainWindow", "ODE Solving Method :"))
        self.comboBox_ode_method.setItemText(0, _translate("MainWindow", "Please Select"))
        self.comboBox_ode_method.setItemText(1, _translate("MainWindow", "Euler"))
        self.comboBox_ode_method.setItemText(2, _translate("MainWindow", "Runge-Kutta"))
        self.label_colon3.setText(_translate("MainWindow", ":"))
        self.label_colon1.setText(_translate("MainWindow", ":"))
        self.label_y.setText(_translate("MainWindow", "y(0)"))
        self.label_n.setText(_translate("MainWindow", "num"))
        self.label_tn.setText(_translate("MainWindow", "tn"))
        self.label_colon2.setText(_translate("MainWindow", ":"))
        self.label_lib1.setText(_translate("MainWindow", "Solution 1"))
        self.comboBox_lib1.setItemText(0, _translate("MainWindow", "Please Select"))
        self.comboBox_lib1.setItemText(1, _translate("MainWindow", "Python: No Library"))
        self.comboBox_lib1.setItemText(2, _translate("MainWindow", "Python: SciPy ivp"))
        self.comboBox_lib1.setItemText(3, _translate("MainWindow", "Python: SciPy odeint"))
        self.comboBox_lib1.setItemText(4, _translate("MainWindow", "Python: SymPy"))
        self.comboBox_lib1.setItemText(5, _translate("MainWindow", "Julia: No Library"))
        self.comboBox_lib1.setItemText(6, _translate("MainWindow", "Julia: DifferentialEquations"))
        self.comboBox_lib1.setItemText(7, _translate("MainWindow", "Julia: ODE"))
        self.label_lib2.setText(_translate("MainWindow", "Solution 2"))
        self.comboBox_lib2.setItemText(0, _translate("MainWindow", "Please Select"))
        self.comboBox_lib2.setItemText(1, _translate("MainWindow", "Python: No Library"))
        self.comboBox_lib2.setItemText(2, _translate("MainWindow", "Python: SciPy ivp"))
        self.comboBox_lib2.setItemText(3, _translate("MainWindow", "Python: SciPy odeint"))
        self.comboBox_lib2.setItemText(4, _translate("MainWindow", "Python: SymPy"))
        self.comboBox_lib2.setItemText(5, _translate("MainWindow", "Julia: No Library"))
        self.comboBox_lib2.setItemText(6, _translate("MainWindow", "Julia: DifferentialEquations"))
        self.comboBox_lib2.setItemText(7, _translate("MainWindow", "Julia: ODE"))
        self.label_lib3.setText(_translate("MainWindow", "Solution 3"))
        self.comboBox_lib3.setItemText(0, _translate("MainWindow", "Please Select"))
        self.comboBox_lib3.setItemText(1, _translate("MainWindow", "Python: No Library"))
        self.comboBox_lib3.setItemText(2, _translate("MainWindow", "Python: SciPy ivp"))
        self.comboBox_lib3.setItemText(3, _translate("MainWindow", "Python: SciPy odeint"))
        self.comboBox_lib3.setItemText(4, _translate("MainWindow", "Python: SymPy"))
        self.comboBox_lib3.setItemText(5, _translate("MainWindow", "Julia: No Library"))
        self.comboBox_lib3.setItemText(6, _translate("MainWindow", "Julia: DifferentialEquations"))
        self.comboBox_lib3.setItemText(7, _translate("MainWindow", "Julia: ODE"))
        self.label_equation.setText(_translate("MainWindow", "Equation :"))
        self.comboBox_equation.setItemText(0, _translate("MainWindow", "Please Select"))
        self.comboBox_equation.setItemText(1, _translate("MainWindow", "dy/dt = -0.3y(t)"))
        self.comboBox_equation.setItemText(2, _translate("MainWindow", "dy/dt = 3e^(-t)"))
        self.comboBox_equation.setItemText(3, _translate("MainWindow", "dy/dt = -0.5(t-1)y(t)"))
        self.comboBox_equation.setItemText(4, _translate("MainWindow", "dy/dt = t^2 + y"))
        self.comboBox_equation.setItemText(5, _translate("MainWindow", "dy/dt = (t^2 - y^2)/(t^2 + y^2)"))
        self.comboBox_equation.setItemText(6, _translate("MainWindow", "dy/dt = y(1-y)"))
        self.comboBox_equation.setItemText(7, _translate("MainWindow", "dy/dt = 2t + y/t"))
        self.comboBox_equation.setItemText(8, _translate("MainWindow", "dy/dt = sqrt(t^2 + y^2)"))
        self.comboBox_equation.setItemText(9, _translate("MainWindow", "dy/dt = sin(y)*e^t"))
        self.comboBox_equation.setItemText(10, _translate("MainWindow", "dy/dt = sin(t) + cos(y)"))
        self.pushButton.setText(_translate("MainWindow", "Calculate"))
        self.groupBox_result.setTitle(_translate("MainWindow", "Result"))
        self.label_22.setText(_translate("MainWindow", "Time : "))
        self.label_time_3rd.setText(_translate("MainWindow", "-"))
        self.label_3rd.setText(_translate("MainWindow", "3rd"))
        self.label_lib_1st.setText(_translate("MainWindow", "Python: TensorFlowProbability"))
        self.label_lib_3rd.setText(_translate("MainWindow", "Julia: No Library"))
        self.label_lib_2nd.setText(_translate("MainWindow", "Julia: DifferentialEquations"))
        self.label_1st.setText(_translate("MainWindow", "1st"))
        self.label_2nd.setText(_translate("MainWindow", "2nd"))
        self.label_19.setText(_translate("MainWindow", "Time : "))
        self.label_time_2nd.setText(_translate("MainWindow", "-"))
        self.label_17.setText(_translate("MainWindow", "Time : "))
        self.label_time_1st.setText(_translate("MainWindow", "-"))
        self.label_show_select_eq.setText(_translate("MainWindow", "dy/dt = -(t-1)y(t)/2 "))

    def show_popup(self, empty_val):
        # Create and configure the pop-up window
        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle("Warning Window")
        msg_box.setText(empty_val)
        msg_box.setIcon(msg_box.Warning)
        msg_box.addButton(msg_box.Ok)
        # Show the message box and wait for the user to close it
        msg_box.exec_()

    def get_all_input(self):
        if self.comboBox_ode_method.currentText() == "Please Select":
            self.show_popup("Please select ODE method")
        elif self.comboBox_equation.currentText() == "Please Select":
            self.show_popup("Please select equation")
        elif self.SpinBox_y.value() == 0.0:
            self.show_popup("Please enter y(0)")
        elif self.SpinBox_n.value() == 0.0:
            self.show_popup("Please enter h")
        elif self.SpinBox_tn.value() == 0.0:
            self.show_popup("Please enter tn")
        elif self.comboBox_lib1.currentText() == "Please Select":
            self.show_popup("Please select library1 for solve ODE")
        elif self.comboBox_lib2.currentText() == "Please Select":
            self.show_popup("Please select library2 for solve ODE")
        elif self.comboBox_lib3.currentText() == "Please Select":
            self.show_popup("Please select library3 for solve ODE")
        else:
            # use import file for solve ode
            ode_method = self.comboBox_ode_method.currentText()
            lib_method1 = self.comboBox_lib1.currentText()
            lib_method2 = self.comboBox_lib2.currentText()
            lib_method3 = self.comboBox_lib3.currentText()
            # val for solve ode
            equation = self.comboBox_equation.currentText()
            equation_index = self.comboBox_equation.currentIndex()
            n = self.SpinBox_n.value()
            y0 = self.SpinBox_y.value()
            tn = self.SpinBox_tn.value()

            # create array ts, ys for cal ODE
            ts = np.linspace(0, float(tn), int(n))
            ys = np.zeros(len(ts))
            ys[0] = float(y0)

            # call calculate ode each library
            y1, time1 = self.calculate_ode(ode_method, equation_index, lib_method1, ts, ys)
            lib1 = lib_method1
            y2, time2 = self.calculate_ode(ode_method, equation_index, lib_method2, ts, ys)
            lib2 = lib_method2
            y3, time3 = self.calculate_ode(ode_method, equation_index, lib_method3, ts, ys)
            lib3 = lib_method3

            # ------------- plot graph ----------------------------------------
            self.plot_graph(ts, y1, y2, y3, lib1, lib2, lib3)
            self.graph = QPixmap("C:\\Users\\admin\\Desktop\\numeric project\\my_project\\graph_pic.png")
            self.total_graph.setPixmap(self.graph)

            # ---------- show result time & library-----------------------------------
            self.show_result(equation, time1, time2, time3, lib1, lib2, lib3)

    def plot_graph(self, ts, y1, y2, y3, lib1, lib2, lib3):
        import matplotlib.pyplot as plt
        plt.figure(figsize = (4.2, 2.5))
        if lib1 != "Python: SymPy":
            plt.plot(ts, list(y1), label=str(lib1))
        if lib2 != "Python: SymPy":
            plt.plot(ts, list(y2), label=str(lib2))
        if lib3 != "Python: SymPy":
            plt.plot(ts, list(y3), label=str(lib3))
        plt.ylabel('f(t)')
        plt.legend()
        plt.savefig("c:\\Users\\admin\\Desktop\\numeric project\\my_project\\graph_pic.png")

    def calculate_ode(self, ode_method, eq_id, lib, ts, ys):
        # ---------- call func calculate ode ---------------------
        if lib == "Python: No Library" and ode_method == "Euler":
            y_plot, time = self.python_euler(eq_id, ts, ys)
        elif lib == "Python: No Library" and ode_method == "Runge-Kutta":
            y_plot, time = self.python_kutta(eq_id, ts, ys)
        elif lib == "Python: SciPy ivp":
            y_plot, time = self.python_scipy_ivp(eq_id, ts, ys)
        elif lib == "Python: SciPy odeint":
            y_plot, time = self.python_scipy_odeint(eq_id, ts, ys)
        elif lib == "Python: SymPy":
            y_plot, time = self.python_sympy(eq_id, ts, ys)
        elif lib == "Julia: No Library" and ode_method == "Euler":
            y_plot, time = self.julia_euler(eq_id, ts, ys)
        elif lib == "Julia: No Library" and ode_method == "Runge-Kutta":
            y_plot, time = self.julia_kutta(eq_id, ts, ys)
        elif lib == "Julia: DifferentialEquations":
            y_plot, time = self.julia_diffEq(eq_id, ts, ys)
        elif lib == "Julia: ODE":
            y_plot, time = self.julia_ode(eq_id, ts, ys)
        return y_plot, time

    def show_result(self, eq, time1, time2, time3, lib1, lib2, lib3):
        # show equation that selected
        self.label_show_select_eq.setText(eq)
        # show sort time of each library
        self.label_time_1st.setText("{} sec".format(time1))
        self.label_time_2nd.setText("{} sec".format(time2))
        self.label_time_3rd.setText("{} sec".format(time3))
        # show sort library
        self.label_lib_1st.setText(lib1)
        self.label_lib_2nd.setText(lib2)
        self.label_lib_3rd.setText(lib3)
        # reset all val
        self.comboBox_ode_method.setCurrentIndex(0)
        self.comboBox_lib1.setCurrentIndex(0)
        self.comboBox_lib2.setCurrentIndex(0)
        self.comboBox_lib3.setCurrentIndex(0)
        self.comboBox_equation.setCurrentIndex(0)
        self.SpinBox_n.setValue(20.0)
        self.SpinBox_y.setValue(1.0)
        self.SpinBox_tn.setValue(20.0)

    # ALL Function -----------------------------------------------
    def python_euler(self, eq_id, ts, ys):
        import euler_python as ep
        t, y = ts, ys
        if eq_id == 1:
            time = ep.explicit_euler(ep.func1, t, y)
        elif eq_id == 2:
            time = ep.explicit_euler(ep.func2, t, y)
        elif eq_id == 3:
            time = ep.explicit_euler(ep.func3, t, y)
        elif eq_id == 4:
            time = ep.explicit_euler(ep.func4, t, y)
        elif eq_id == 5:
            time = ep.explicit_euler(ep.func5, t, y)
        elif eq_id == 6:
            time = ep.explicit_euler(ep.func6, t, y)
        elif eq_id == 7:
            time = ep.explicit_euler(ep.func7, t, y)
        elif eq_id == 8:
            time = ep.explicit_euler(ep.func8, t, y)
        elif eq_id == 9:
            time = ep.explicit_euler(ep.func9, t, y)
        elif eq_id == 10:
            time = ep.explicit_euler(ep.func10, t, y)
        return y, time
    
    def python_kutta(self, eq_id, ts, ys):
        import rk1_python as rk1
        t, y = ts, ys
        if eq_id == 1:
            y,time = rk1.rungekutta1(rk1.func1, t, y)
        elif eq_id == 2:
            y,time = rk1.rungekutta1(rk1.func2, t, y)
        elif eq_id == 3:
            y,time = rk1.rungekutta1(rk1.func3, t, y)
        elif eq_id == 4:
            y,time = rk1.rungekutta1(rk1.func4, t, y)
        elif eq_id == 5:
            y,time = rk1.rungekutta1(rk1.func5, t, y)
        elif eq_id == 6:
            y,time = rk1.rungekutta1(rk1.func6, t, y)
        elif eq_id == 7:
            y,time = rk1.rungekutta1(rk1.func7, t, y)
        elif eq_id == 8:
            y,time = rk1.rungekutta1(rk1.func8, t, y)
        elif eq_id == 9:
            y,time = rk1.rungekutta1(rk1.func9, t, y)
        elif eq_id == 10:
            y,time = rk1.rungekutta1(rk1.func10, t, y)
        return y, time
    
    def python_scipy_ivp(self, eq_id, ts, ys):
        import sci_ivp as ivp
        t, y = ts, ys
        if eq_id == 1:
            sol, time = ivp.solve_ode(ivp.func1, t, y[0])
        elif eq_id == 2:
            sol, time = ivp.solve_ode(ivp.func2, t, y[0])
        elif eq_id == 3:
            sol, time = ivp.solve_ode(ivp.func3, t, y[0])
        elif eq_id == 4:
            sol, time = ivp.solve_ode(ivp.func4, t, y[0])
        elif eq_id == 5:
            sol, time = ivp.solve_ode(ivp.func5, t, y[0])
        elif eq_id == 6:
            sol, time = ivp.solve_ode(ivp.func6, t, y[0])
        elif eq_id == 7:
            sol, time = ivp.solve_ode(ivp.func7, t, y[0])
        elif eq_id == 8:
            sol, time = ivp.solve_ode(ivp.func8, t, y[0])
        elif eq_id == 9:
            sol, time = ivp.solve_ode(ivp.func9, t, y[0])
        elif eq_id == 10:
            sol, time = ivp.solve_ode(ivp.func10, t, y[0])
        new_sol = []
        for i in range(len(sol)):
            new_sol.append(sol[i][0])
        sol = new_sol
        return sol, time

    def python_scipy_odeint(self, eq_id, ts, ys):
        import sci_odeint as so
        t, y = ts, ys
        if eq_id == 1:
            sol, time = so.solve_ode(so.func1, t, y[0])
        elif eq_id == 2:
            sol, time = so.solve_ode(so.func2, t, y[0])
        elif eq_id == 3:
            sol, time = so.solve_ode(so.func3, t, y[0])
        elif eq_id == 4:
            sol, time = so.solve_ode(so.func4, t, y[0])
        elif eq_id == 5:
            sol, time = so.solve_ode(so.func5, t, y[0])
        elif eq_id == 6:
            sol, time = so.solve_ode(so.func6, t, y[0])
        elif eq_id == 7:
            sol, time = so.solve_ode(so.func7, t, y[0])
        elif eq_id == 8:
            sol, time = so.solve_ode(so.func8, t, y[0])
        elif eq_id == 9:
            sol, time = so.solve_ode(so.func9, t, y[0])
        elif eq_id == 10:
            sol, time = so.solve_ode(so.func10, t, y[0])
        new_sol = []
        for i in range(len(sol)):
            new_sol.append(sol[i][0])
        sol = new_sol
        return sol, time

    def python_sympy(self, eq_id, ts, ys):
        import sym_ode as sym
        t, y = ts, ys
        if eq_id == 1:
            sol, time = sym.solve_ode(sym.func1, y[0])
        elif eq_id == 2:
            sol, time = sym.solve_ode(sym.func2, y[0])
        elif eq_id == 3:
            sol, time = sym.solve_ode(sym.func3, y[0])
        elif eq_id == 4:
            sol, time = sym.solve_ode(sym.func4, t, y[0])
        elif eq_id == 5:
            sol, time = sym.solve_ode(sym.func5, t, y[0])
        elif eq_id == 6:
            sol, time = sym.solve_ode(sym.func6, t, y[0])
        elif eq_id == 7:
            sol, time = sym.solve_ode(sym.func7, t, y[0])
        elif eq_id == 8:
            sol, time = sym.solve_ode(sym.func8, t, y[0])
        elif eq_id == 9:
            sol, time = sym.solve_ode(sym.func9, t, y[0])
        elif eq_id == 10:
            sol, time = sym.solve_ode(sym.func10, t, y[0])
        sol = "None"
        return sol, time

    def julia_euler(self, eq_id, ts, ys):
        print("start1")
        t, y = ts, ys
        jl = julia.Julia(compiled_modules=False)
        jl.include("C:/Users/admin/Desktop/numeric project/my_project/euler_julia.jl")
        print("start2")
        s_time = time.time()
        if eq_id == 1:
            sol = jl.explicit_euler(jl.func1, y, t)
        elif eq_id == 2:
            sol = jl.explicit_euler(jl.func2, y, t)
        elif eq_id == 3:
            sol = jl.explicit_euler(jl.func3, y, t)
        elif eq_id == 4:
            sol = jl.explicit_euler(jl.func4, y, t)
        elif eq_id == 5:
            sol = jl.explicit_euler(jl.func5, y, t)
        elif eq_id == 6:
            sol = jl.explicit_euler(jl.func6, y, t)
        elif eq_id == 7:
            sol = jl.explicit_euler(jl.func7, y, t)
        elif eq_id == 8:
            sol = jl.explicit_euler(jl.func8, y, t)
        elif eq_id == 9:
            sol = jl.explicit_euler(jl.func9, y, t)
        elif eq_id == 10:
            sol = jl.explicit_euler(jl.func10, y, t)
        e_time = time.time()
        return sol, e_time - s_time

    def julia_kutta(self, eq_id, ts, ys):
        jl = julia.Julia(compiled_modules=False)
        jl.include("C:\\Users\\admin\\Desktop\\numeric project\\my_project\\rk1_julia.jl")
        t, y = ts, ys
        s_time = time.time()
        if eq_id == 1:
            sol = jl.rungekutta1(jl.func1, y, t)
        elif eq_id == 2:
            sol = jl.rungekutta1(jl.func2, y, t)
        elif eq_id == 3:
            sol = jl.rungekutta1(jl.func3, y, t)
        elif eq_id == 4:
            sol = jl.rungekutta1(jl.func4, y, t)
        elif eq_id == 5:
            sol = jl.rungekutta1(jl.func5, y, t)
        elif eq_id == 6:
            sol = jl.rungekutta1(jl.func6, y, t)
        elif eq_id == 7:
            sol = jl.rungekutta1(jl.func7, y, t)
        elif eq_id == 8:
            sol = jl.rungekutta1(jl.func8, y, t)
        elif eq_id == 9:
            sol = jl.rungekutta1(jl.func9, y, t)
        elif eq_id == 10:
            sol = jl.rungekutta1(jl.func10, y, t)
        e_time = time.time()
        return sol, e_time - s_time

    def julia_diffEq(self, eq_id, ts, ys):
        jl = julia.Julia(compiled_modules=False)
        jl.include("C:\\Users\\admin\\Desktop\\numeric project\\my_project\\diffEq_julia.jl")
        t, y = ts, ys
        s_time = time.time()
        if eq_id == 1:
            sol = jl.differentialEquation(jl.func1, y, t)
        elif eq_id == 2:
            sol = jl.differentialEquation(jl.func2, y, t)
        elif eq_id == 3:
            sol = jl.differentialEquation(jl.func3, y, t)
        elif eq_id == 4:
            sol = jl.differentialEquation(jl.func4, y, t)
        elif eq_id == 5:
            sol = jl.differentialEquation(jl.func5, y, t)
        elif eq_id == 6:
            sol = jl.differentialEquation(jl.func6, y, t)
        elif eq_id == 7:
            sol = jl.differentialEquation(jl.func7, y, t)
        elif eq_id == 8:
            sol = jl.differentialEquation(jl.func8, y, t)
        elif eq_id == 9:
            sol = jl.differentialEquation(jl.func9, y, t)
        elif eq_id == 10:
            sol = jl.differentialEquation(jl.func10, y, t)
        e_time = time.time()
        return sol, e_time - s_time

    def julia_ode(self, eq_id, ts, ys):
        jl = julia.Julia(compiled_modules=False)
        jl.include("C:\\Users\\admin\\Desktop\\numeric project\\my_project\\ode_julia.jl")
        t, y = ts, ys
        s_time = time.time()
        if eq_id == 1:
            sol = jl.ode_23(jl.func1, y, t)
        elif eq_id == 2:
            sol = jl.ode_23(jl.func2, y, t)
        elif eq_id == 3:
            sol = jl.ode_23(jl.func3, y, t)
        elif eq_id == 4:
            sol = jl.ode_23(jl.func4, y, t)
        elif eq_id == 5:
            sol = jl.ode_23(jl.func5, y, t)
        elif eq_id == 6:
            sol = jl.ode_23(jl.func6, y, t)
        elif eq_id == 7:
            sol = jl.ode_23(jl.func7, y, t)
        elif eq_id == 8:
            sol = jl.ode_23(jl.func8, y, t)
        elif eq_id == 9:
            sol = jl.ode_23(jl.func9, y, t)
        elif eq_id == 10:
            sol = jl.ode_23(jl.func10, y, t)
        e_time = time.time()
        return sol, e_time - s_time


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
